Explanation:
Objective:

You want a "close" button that, when clicked, hides the chat window and displays a small, vibrating circle instead.
Clicking this circle should restore the chat window to its original size and state.
Steps to Implement:

CSS for Visual Effects:
Create styles that hide the chat window and transform it into a small circle.
Add animation to this circle to make it vibrate.
JavaScript for State Management:
Implement a function to switch the chat window to the closed state (hide the chat content, show the circle).
Implement another function to restore the chat window from the closed state (hide the circle, show the chat content).
Detailed Process:

Close Button Functionality:
The close button, when clicked, should:
Add a specific CSS class to the chat container to change its shape and size to a small circle.
Apply a vibration animation to make the circle attract attention.
Restore Functionality:
The small circle (which is the chat container in its minimized state) should:
Be clickable.
When clicked, it should remove the CSS class that made it a small circle and restore its original styles and size.
User Interaction:

When the user clicks the "close" button, the chat window will shrink down to a small, vibrating circle.
Clicking this circle will revert the chat window back to its normal state.
This setup ensures that your chat window can transition smoothly between its full size and a minimized, attention-grabbing circle.



function chatbotApp() {
    let isMinimized = false;
    let isMaximized = false;
    let isClosed = false;
    let lastX = null;
    let lastY = null;
    let isClearingChat = false;

    const chatContainer = document.getElementById('chat-container');
    const clearChatButton = document.getElementById('clear-chat'); 

    function centerChatContainer() {
        if (isMinimized || isClosed) return;
    
        chatContainer.style.removeProperty('right');
        chatContainer.style.removeProperty('bottom');
        chatContainer.style.removeProperty('transform');
    
        document.getElementById('div-wrapper').style.display = 'flex';
        document.getElementById('div-wrapper').style.justifyContent = 'center';
        document.getElementById('div-wrapper').style.alignItems = 'center';
    }

    window.addEventListener('resize', centerChatContainer);

    function makeDraggable() {
        const handle = document.getElementById('chat-header');
        let startX, startY, initialX, initialY;
    
        handle.addEventListener('mousedown', function(e) {
            if (isMinimized || isMaximized) return;
    
            startX = e.clientX;
            startY = e.clientY;
            const rect = chatContainer.getBoundingClientRect();
            initialX = rect.left;
            initialY = rect.top;
    
            function onMouseMove(e) {
                const deltaX = e.clientX - startX;
                const deltaY = e.clientY - startY;
            
                let newLeft = initialX + deltaX;
                let newTop = initialY + deltaY;
            
                newLeft = Math.max(0, Math.min(newLeft, window.innerWidth - chatContainer.offsetWidth));
                newTop = Math.max(0, Math.min(newTop, window.innerHeight - chatContainer.offsetHeight));
            
                lastX = (newLeft / window.innerWidth) * 100;
                lastY = (newTop / window.innerHeight) * 100;
            
                chatContainer.style.left = `${lastX}%`;
                chatContainer.style.top = `${lastY}%`;
            }
    
            function onMouseUp() {
                document.removeEventListener('mousemove', onMouseMove);
                document.removeEventListener('mouseup', onMouseUp);
            }
    
            document.addEventListener('mousemove', onMouseMove);
            document.addEventListener('mouseup', onMouseUp);
        });
    }

    function minimizeChat() {
        if (!isMinimized) {
            chatContainer.classList.add('minimized');
            chatContainer.classList.remove('maximized');
            chatContainer.style.inset = 'auto 0px 0px auto';
            isMinimized = true;
            isMaximized = false;
        } else {
            chatContainer.classList.remove('minimized');
            chatContainer.style.removeProperty('inset');
            if (isMaximized) {
                maximizeChat();
            } else if (lastX !== null && lastY !== null) {
                chatContainer.style.left = `${lastX}%`;
                chatContainer.style.top = `${lastY}%`;
            } else {
                centerChatContainer();
            }
            isMinimized = false;
        }
    }

    function maximizeChat() {
        if (!isMaximized) {
            chatContainer.classList.add('maximized');
            chatContainer.classList.remove('minimized');
            lastX = chatContainer.style.left;
            lastY = chatContainer.style.top;
            isMaximized = true;
            isMinimized = false;
        } else {
            chatContainer.classList.remove('maximized');
            chatContainer.style.left = lastX;
            chatContainer.style.top = lastY;
            isMaximized = false;
        }
    }

    function closeChat() {
        console.log("closeChat function called");
        if (!isClosed) {
            chatContainer.classList.add('closed');
            chatContainer.classList.remove('minimized');
            isClosed = true;
        }
    }

    function restoreChat() {
        console.log("restoreChat function called");
        chatContainer.classList.remove('closed');
        isClosed = false;
    }

    function clearChat() {
        console.log("clearChat function called");
        const chatLog = document.getElementById('chat-log');

        if (!isClearingChat) {
            console.log("Setting 'Clear Chat' button to 'Cancel' and changing its color to red");
            clearChatButton.classList.add('button-orange');
            clearChatButton.textContent = 'Cancel';
            clearChatButton.style.background = 'red';
            isClearingChat = true;

            console.log("Adding confirmation options to chatLog");
            chatLog.innerHTML = `
            <div id="clear-chat-confirmation">Are you sure you want to clear the chat?</div>
            <div id="clear-chat-buttons">
                <button id="confirmClear" class="button-orange">Yes, Clear Chat</button>
                <button id="startNewSession" class="button-orange" onclick="location.reload();">Start New Session</button>
            </div>
            `;

            document.getElementById('confirmClear').addEventListener('click', this.confirmClearChat.bind(this));
        } else {
            console.log("Cancel action selected, restoring the initial state of the chat log and 'Clear Chat' button");
            chatLog.innerHTML = '';
            clearChatButton.textContent = 'Clear Chat';
            clearChatButton.classList.remove('button-orange');
            clearChatButton.style.background = '';
            isClearingChat = false;
        }
    }

    function confirmClearChat() {
        console.log("confirmClearChat function called");
        document.getElementById('chat-log').innerHTML = '';
        console.log("Cleared chat content");
        this.chatbot.conversationHistory = [];
        console.log("Conversation history cleared");

        console.log("Resetting 'Clear Chat' button to its original state");
        clearChatButton.textContent = 'Clear Chat';
        clearChatButton.style.background = '';
        isClearingChat = false;
    }

    return {
        chatbot: new Chatbot(),
        initChatbot() {
            centerChatContainer();
            window.addEventListener('resize', function() {
                if (isMinimized) {
                    chatContainer.style.inset = 'auto 0px 0px auto';
                } else if (isMaximized) {
                    // No need to reposition if maximized
                } else if (lastX !== null && lastY !== null) {
                    const leftInPx = (window.innerWidth * lastX) / 100;
                    const topInPx = (window.innerHeight * lastY) / 100;
            
                    const constrainedLeft = Math.min(leftInPx, window.innerWidth - chatContainer.offsetWidth);
                    const constrainedTop = Math.min(leftInPx, window.innerHeight - chatContainer.offsetHeight);
            
                    chatContainer.style.left = `${(constrainedLeft / window.innerWidth) * 100}%`;
                    chatContainer.style.top = `${(constrainedTop / window.innerHeight) * 100}%`;
                } else {
                    centerChatContainer();
                }
            });
            makeDraggable();
            chatContainer.addEventListener('click', function() {
                if (isClosed) restoreChat();
            });
        },
        userInput: '',
        sendMessage() {
            if (this.userInput.trim() !== '') {
                this.chatbot.sendMessage(this.userInput.trim(), 'User');
                this.userInput = '';
            }
        },
        minimizeChat: minimizeChat,
        maximizeChat: maximizeChat,
        closeChat: closeChat,
        clearChat: clearChat,
        confirmClearChat: confirmClearChat,
        restoreChat: restoreChat
    };
}

